package com.cvp.model;

import java.time.*;

import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTypeConverted;
import com.cvp.config.LocalDateConverter;
import com.fasterxml.jackson.annotation.JsonBackReference;
import jakarta.validation.constraints.FutureOrPresent;
import jakarta.validation.constraints.NotEmpty;
import jakarta.validation.constraints.NotNull;
import lombok.*;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Component
@Scope("prototype")
@DynamoDBTable(tableName = "Task")
public class Task {

    @DynamoDBHashKey(attributeName = "id")
    @DynamoDBAutoGeneratedKey
    private String id;

    @DynamoDBAttribute(attributeName = "title")
    @NotNull(message = "Provide value for title")
    private String title;

    @DynamoDBAttribute(attributeName = "description")
    @NotEmpty(message = "Provide value for description")
    private String description;

    @DynamoDBAttribute(attributeName = "location")
    @NotEmpty(message = "Provide value for location")
    private String location;

    @DynamoDBAttribute(attributeName = "status")
    @NotNull(message = "Provide value for status")
    private String status;

    @DynamoDBAttribute(attributeName = "priority")
    @NotNull(message = "Provide value for priority")
    private String priority;

    @DynamoDBAttribute(attributeName = "category")
    @NotNull(message = "Provide value for category")
    private String category;

    @DynamoDBAttribute(attributeName = "eventDate")
    @DynamoDBTypeConverted(converter = LocalDateConverter.class)
    @NotNull(message = "Provide value for event date")
    @FutureOrPresent(message = "Event start date should be either current or future date")
    private LocalDate eventDate;

    @DynamoDBAttribute(attributeName = "endDate")
    @DynamoDBTypeConverted(converter = LocalDateConverter.class)
    @FutureOrPresent(message = "Event End date should be either current or future date")
    private LocalDate endDate;

    @DynamoDBAttribute(attributeName = "o_id")
    @JsonBackReference
    private String o_id;

}
